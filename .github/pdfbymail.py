#reports.py
from reportlab.platypus import SimpleDocTemplate
from reportlab.platypus import Paragraph, Spacer, Table, Image
from reportlab.lib.styles import getSampleStyleSheet
from reportlab.lib import colors

def generate(filename, title, additional_info, table_data):
  styles = getSampleStyleSheet()
  report = SimpleDocTemplate(filename)
  report_title = Paragraph(title, styles["h1"])
  report_info = Paragraph(additional_info, styles["BodyText"])
  table_style = [('GRID', (0,0), (-1,-1), 1, colors.black),
                ('FONTNAME', (0,0), (-1,0), 'Helvetica-Bold'),
                ('ALIGN', (0,0), (-1,-1), 'CENTER')]
  report_table = Table(data=table_data, style=table_style, hAlign="LEFT")
  empty_line = Spacer(1,20)
  report.build([report_title, empty_line, report_info, empty_line, report_table])


#emails.py
import email.message
import mimetypes
import os.path
import smtplib

def generate(sender, recipient, subject, body, attachment_path):
  """Creates an email with an attachement."""
  # Basic Email formatting
  message = email.message.EmailMessage()
  message["From"] = sender
  message["To"] = recipient
  message["Subject"] = subject
  message.set_content(body)

  # Process the attachment and add it to the email
  attachment_filename = os.path.basename(attachment_path)
  mime_type, _ = mimetypes.guess_type(attachment_path)
  mime_type, mime_subtype = mime_type.split('/', 1)

  with open(attachment_path, 'rb') as ap:
    message.add_attachment(ap.read(),
                          maintype=mime_type,
                          subtype=mime_subtype,
                          filename=attachment_filename)

  return message

def send(message):
  """Sends the message to the configured SMTP server."""
  mail_server = smtplib.SMTP('localhost')
  mail_server.send_message(message)
  mail_server.quit()
#-------------------------------------------------------------------------------------------------------------
#example.py


#!/usr/bin/env python3

import json
import locale
import sys
import reports
import emails

def load_data(filename):
  """Loads the contents of filename as a JSON file."""
  with open(filename) as json_file:
    data = json.load(json_file)
  return data


def format_car(car):
  """Given a car dictionary, returns a nicely formatted name."""
  return "{} {} ({})".format(
      car["car_make"], car["car_model"], car["car_year"])


def process_data(data):
  """Analyzes the data, looking for maximums.

  Returns a list of lines that summarize the information.
  """
  max_sales = {"total_sales": 0}
  bestyearcar={}
  max_revenue = {"revenue": 0}

  for item in data:
# Calculate the revenue generated by this model (price * total_sales)
    # We need to convert the price from "$1234.56" to 1234.56
    item_price = locale.atof(item["price"].strip("$"))
    item_revenue = item["total_sales"] * item_price
    if item_revenue > max_revenue["revenue"]:
      item["revenue"] = item_revenue
      max_revenue = item
      
    # TODO: also handle max sales
    if item['total_sales'] > max_sales["total_sales"]:
      max_sales = item
    

    # TODO: also handle most popular car_year
    car=item.get('car')
    car_year=car.get('car_year')
    if car_year not in bestyearcar.keys():
        bestyearcar[car_year] = item['total_sales'] 
    else:
        bestyearcar[car_year] += item ['total_sales'] 
    print(bestyearcar)

    sorted_bestyearcar={}
    sorted_keys = sorted(bestyearcar, key=bestyearcar.get)
    for x in sorted_keys:
      sorted_bestyearcar[x] = bestyearcar[x]
      

    bestyear=list(sorted_bestyearcar.keys())[-1]
    best_year_totalsales = sorted_bestyearcar[bestyear]
    print(best_year_totalsales)
    print(bestyear)
    print('The most popular year was {} with {} sales.'.format(bestyear, best_year_totalsales))
  
  summary = [
    "The {} generated the most revenue: ${}".format(
      format_car(max_revenue["car"]), max_revenue["revenue"]), 
      'The {} had the most sales: {} '.format(format_car(max_sales["car"]),max_sales['total_sales']), 
      'The most popular year was {} with {} sales.'.format(bestyear, best_year_totalsales)
  ]
  return summary


def cars_dict_to_table(car_data):
    """Turns the data in car_data into a list of lists."""
    table_data = [["ID", "Car", "Price", "Total Sales"]]
    for item in car_data:
      table_data.append([item["id"], format_car(item["car"]), item["price"], item$
    return table_data


def main(argv):
    """Process the JSON data and generate a full report out of it."""
    data = load_data("car_sales.json")
    summary = process_data(data)
    print(summary)
    # TODO: turn this into a PDF report
    filename = "/tmp/cars.pdf"
    title = "Sales summary for last month"
    additional_info = "<br/>".join(summary)
    table_data = cars_dict_to_table(data)
    reports.generate(filename, title, additional_info, table_data)
    # TODO: send the PDF report as an email attachment
    sender = "automation@example.com"
    recipient = "{}@example.com".format(os.environ.get('USER'))
    subject = "Sales summary for last month"
    body = "\n".join(summary)
    attachment_path = "/tmp/cars.pdf"
    message = emails.generate(sender, recipient, subject, body, attachment_path)
    emails.send(message)
    

if __name__ == "__main__":
  main(sys.argv)

